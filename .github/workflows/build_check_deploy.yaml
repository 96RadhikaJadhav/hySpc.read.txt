# Note: where customization is needed I have added a #CUST comment
# so that when this file is replicated elsewhere it is easier to make
# ALL the necessary changes.  This applies primarily to the deploy section;
# clearly one has to make changes to build and check as well if
# you move this file to another pkg repo.  Bryan


on:
  push:
    branches:
      - feature/issue-16
  pull_request:
    branches:
      - develop
# Note on the above: if more than one branch given one may stomp on the other
# during deployment, so use only one branch.
name: R-CMD-build-check-deploy

jobs:
  R-CMD-build-check-deploy:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - {os: ubuntu-16.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("roxygen2")
          remotes::install_cran("drat") # need later to deploy
        shell: Rscript {0}

      - name: Roxygenize
        run: |
          roxygen2::roxygenize()
        shell: Rscript {0}

      - name: Build and Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning",
            check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

# Everything above is standard build & check steps
# Now the steps to deploy to hySpc.pkgs

# The following configure step is
# from https://stackoverflow.com/a/60548651/633251
# #CUST token is a secret in the repo to which one deploys
      - name: Configure git
        env:
          TOKEN: ${{ secrets.HYSPC_EO_TOKEN }}
        run: git config --global url."https://${TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Deploy -- clone
        if: success()
        run: |
          rm -rf hySpc.pkgs
          git clone https://github.com/r-hyperspec/hySpc.pkgs.git hySpc.pkgs
          cd hySpc.pkgs
          git checkout gh-pages

# Please leave commented lines below, they are very helpful in troubleshooting.
      - name: Deploy -- insert
        if: success()
        run: |
          setwd("../hySpc.read.txt") #CUST
          # print(getwd())
          # print(list.files(recursive = TRUE,
          #  pattern = "\\.tar\\.gz"))
          targz <- list.files(
            path = "check",
            pattern = "\\.tar\\.gz",
            full.names = TRUE)[1] # there will be only one in this directory!
          # print(targz)
          list.files()
          drat::insertPackage(targz,
            repodir = "hySpc.pkgs",
            action = "archive")
          list.files("hySpc.pkgs", recursive = TRUE)
        shell: Rscript {0}

      - name: Deploy -- update README.md
        if: success()
        run: |
           # grab the portion of the file we want to re-use
           awk '/^# hySpc\.pkgs$/, /^Packages currently residing here:$/' README.md > README.tmp
           # append the listing of .tar.gz present, along
           # a little formating (appending to .md that will be parsed
           # and displayed by GH)
           ls -lhR  --time-style=long-iso | grep \.tar\.gz$ | awk '{print "\n* "$8, " ("$6")"}' >> README.tmp
           mv README.tmp README.md

      - name: Deploy -- commit and push
        if: success()
        run: | #CUST update the name of the local repo
          git config --global user.email "hySpc_read_txt_Deploy_Bot@example.com"
          git config --global user.name "hySpc.read.txt Deploy Bot"
          cd hySpc.pkgs # move into the subdir, which is git controlled
          git add *
          git commit -m "Automated deploy from hySpc.read.txt" #CUST
          # git push origin master
          # git checkout gh-pages # always keep the branches identical!
          # git merge master
          git push origin gh-pages
